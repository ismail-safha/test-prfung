
// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "mongodb"
//   url      = env("DATABASE_URL")
// }

// model Account {
//   id                 String    @id @default(auto()) @map("_id") @db.ObjectId
//   userId             String  @db.ObjectId
//   providerType       String
//   providerId         String
//   providerAccountId  String
//   refreshToken       String?   @db.String
//   accessToken        String?  @db.String
//   accessTokenExpires DateTime?
//   createdAt          DateTime  @default(now())
//   updatedAt          DateTime  @updatedAt
//   user               User      @relation(fields: [userId], references: [id])

//   @@unique([providerId, providerAccountId])
// }

// model Session {
//   id           String   @id @default(auto()) @map("_id") @db.ObjectId
//   userId       String  @db.ObjectId
//   expires      DateTime
//   sessionToken String   @unique
//   accessToken  String   @unique
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
//   user         User     @relation(fields: [userId], references: [id])
// }

// model User {
//   id             String    @id @default(auto()) @map("_id") @db.ObjectId
//   name           String?   @unique
//   email          String?   @unique
//   role           Role      @default(USER)
//   password       String
//   // hashedPassword String?
//   image          String?
//   createdAt      DateTime  @default(now())
//   updatedAt      DateTime  @updatedAt
//   accounts       Account[]
//   sessions       Session[]
// }

// enum Role {
//   USER
//   ADMIN
// }

// model VerificationRequest {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   identifier String
//   token      String   @unique
//   expires    DateTime
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt

//   @@unique([identifier, token])
// }



//====


generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}


model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
  role           Role      @default(USER)
  password       String
    image         String?
    createdAt DateTime @default(now())
    accounts      Account[]
    sessions      Session[]
 
}
enum Role {
  USER
  ADMIN
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
